input {
  # Docker容器日志输入
  beats {
    port => 5044
  }
  
  # 直接从Docker日志文件读取
  file {
    path => "/var/log/containers/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => json
    type => "docker"
  }
}

filter {
  # 解析Docker容器日志
  if [type] == "docker" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{GREEDYDATA:message}" }
      overwrite => [ "message" ]
    }
    
    # 解析时间戳
    date {
      match => [ "timestamp", "ISO8601" ]
    }
    
    # 添加服务标签
    if [container_name] =~ "user-service" {
      mutate { add_field => { "service" => "user-service" } }
    } else if [container_name] =~ "post-service" {
      mutate { add_field => { "service" => "post-service" } }
    } else if [container_name] =~ "comment-service" {
      mutate { add_field => { "service" => "comment-service" } }
    } else if [container_name] =~ "mysql" {
      mutate { add_field => { "service" => "mysql" } }
    } else if [container_name] =~ "redis" {
      mutate { add_field => { "service" => "redis" } }
    } else if [container_name] =~ "nginx" {
      mutate { add_field => { "service" => "nginx" } }
    }
  }
  
  # 解析Nginx访问日志
  if [service] == "nginx" {
    grok {
      match => { "message" => "%{NGINXACCESS}" }
    }
  }
  
  # 解析MySQL错误日志
  if [service] == "mysql" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:mysql_timestamp} %{NUMBER:thread_id} \[%{WORD:level}\] %{GREEDYDATA:mysql_message}" }
    }
  }
  
  # 过滤敏感信息
  mutate {
    remove_field => [ "password", "token", "secret" ]
  }
}

output {
  # 输出到Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch-logs:9200"]
    index => "blog-microservices-logs-%{+YYYY.MM.dd}"
  }
  
  # 调试输出到控制台
  stdout {
    codec => rubydebug
  }
}