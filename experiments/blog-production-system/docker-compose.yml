version: '3.3'

services:
  # 前端服务 - Nginx静态文件服务
  frontend:
    image: nginx:alpine
    ports:
      - "8085:80"  # 避免与现有服务端口冲突
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - blog-network

  # 后端API服务 - Node.js简单API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DB_HOST=database
      - DB_NAME=blog_system
      - DB_USER=bloguser
      - DB_PASSWORD=secret123
      - REDIS_HOST=cache
      - NODE_ENV=production
    depends_on:
      - database
      - cache
    restart: unless-stopped
    networks:
      - blog-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 数据库服务
  database:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=blog_system
      - MYSQL_USER=bloguser
      - MYSQL_PASSWORD=secret123
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init-db:/docker-entrypoint-initdb.d
      - ./mysql.cnf:/etc/mysql/conf.d/mysql.cnf
    restart: unless-stopped
    networks:
      - blog-network
    ports:
      - "3307:3306"  # 避免与现有MySQL端口冲突

  # 缓存服务
  cache:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - blog-network
    ports:
      - "6381:6379"  # 避免与现有Redis端口冲突

  # 数据库管理工具 - 可选
  adminer:
    image: adminer:latest
    ports:
      - "8082:8080"  # 避免与现有Adminer端口冲突
    depends_on:
      - database
    restart: unless-stopped
    networks:
      - blog-network

volumes:
  mysql_data:
  redis_data:

networks:
  blog-network:
    driver: bridge