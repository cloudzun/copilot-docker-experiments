events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # 上游服务定义
    upstream user_service {
        server user-service:3001;
        keepalive 32;
    }
    
    upstream post_service {
        server post-service:3002;
        keepalive 32;
    }
    
    upstream comment_service {
        server comment-service:3003;
        keepalive 32;
    }
    
    # 日志格式
    log_format microservices '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for" '
                            'upstream="$upstream_addr" response_time=$upstream_response_time';
    
    access_log /var/log/nginx/access.log microservices;
    error_log /var/log/nginx/error.log warn;
    
    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # 主服务器配置
    server {
        listen 80;
        server_name localhost;
        
        # 安全头设置
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # 静态文件服务 (复用Module 4的前端)
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;
            
            # 静态资源缓存
            location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)$ {
                expires 1M;
                add_header Cache-Control "public, immutable";
            }
        }
        
        # 用户服务路由
        location ~ ^/api/users($|/.*) {
            # 移除 /api/users 前缀，只传递后面的路径
            rewrite ^/api/users/(.*)$ /$1 break;
            rewrite ^/api/users$ / break;
            
            proxy_pass http://user_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 连接和超时设置
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # HTTP 1.1 支持
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # CORS处理
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain; charset=utf-8';
                add_header Content-Length 0;
                return 204;
            }
        }
        
        # 文章服务路由  
        location ~ ^/api/posts($|/.*) {
            rewrite ^/api/posts/(.*)$ /$1 break;
            rewrite ^/api/posts$ / break;
            
            proxy_pass http://post_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 15s;
            proxy_read_timeout 15s;
            
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain; charset=utf-8';
                add_header Content-Length 0;
                return 204;
            }
        }
        
        # 评论服务路由
        location ~ ^/api/comments($|/.*) {
            rewrite ^/api/comments/(.*)$ /$1 break;
            rewrite ^/api/comments$ / break;
            
            proxy_pass http://comment_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain; charset=utf-8';
                add_header Content-Length 0;
                return 204;
            }
        }
        
        # 聚合健康检查
        location /api/health {
            proxy_pass http://post_service/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            
            # 添加服务标识头
            add_header X-Service-Gateway "api-gateway" always;
        }
        
        # 系统状态聚合端点
        location /api/status {
            content_by_lua_block {
                local http = require "resty.http"
                local cjson = require "cjson"
                
                local httpc = http.new()
                local services = {
                    {name = "user-service", url = "http://user-service:3001/health"},
                    {name = "post-service", url = "http://post-service:3002/health"},
                    {name = "comment-service", url = "http://comment-service:3003/health"}
                }
                
                local results = {}
                local all_healthy = true
                
                for _, service in ipairs(services) do
                    local res, err = httpc:request_uri(service.url, {
                        method = "GET",
                        timeout = 3000
                    })
                    
                    if res and res.status == 200 then
                        results[service.name] = {
                            status = "healthy",
                            response_time = res.headers["X-Response-Time"] or "unknown"
                        }
                    else
                        results[service.name] = {
                            status = "unhealthy",
                            error = err or "Connection failed"
                        }
                        all_healthy = false
                    end
                end
                
                local response = {
                    gateway = "api-gateway",
                    overall_status = all_healthy and "healthy" or "degraded",
                    services = results,
                    timestamp = ngx.time()
                }
                
                ngx.header.content_type = "application/json"
                ngx.status = all_healthy and 200 or 503
                ngx.say(cjson.encode(response))
            }
        }
        
        # 简化版状态检查 (不依赖Lua)
        location /api/simple-status {
            return 200 '{"gateway":"api-gateway","status":"healthy","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        # Nginx状态页面 (内部监控)
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.16.0.0/12;  # Docker网络
            deny all;
        }
        
        # 错误页面
        error_page 404 /404.html;
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
    
    # 可选：管理界面服务器块 (用于内部监控)
    server {
        listen 8080;
        server_name localhost;
        
        location / {
            return 200 'API Gateway Management Interface\n';
            add_header Content-Type text/plain;
        }
        
        location /status {
            stub_status on;
        }
        
        location /upstream_status {
            # 这里可以添加上游服务器状态检查
            return 200 'Upstream Services Status\n';
            add_header Content-Type text/plain;
        }
    }
}